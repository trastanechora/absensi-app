generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Office {
  id        String     @id @default(uuid())
  name      String     @unique
  radius    Int
  duration  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  lat       String
  long      String
  presences Presence[]
  users     User[]
}

model User {
  id               String     @id @default(uuid())
  name             String
  status           String     @default("active")
  email            String     @unique
  officeId         String?
  role             String?
  password         String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  isStrictDuration Boolean    @default(true)
  isStrictRadius   Boolean    @default(true)
  gradeId          String?
  loggedIn         Boolean    @default(false)
  approvals        Approval[]
  leaves           Leave[]
  presences        Presence[]
  grade            Grade?     @relation(fields: [gradeId], references: [id])
  office           Office?    @relation(fields: [officeId], references: [id])
  divisions        Division[] @relation("DivisionToUser")
}

model Presence {
  id               String    @id @default(uuid())
  userId           String
  clockInDate      DateTime?
  clockOutDate     DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  clockInDistance  Int?
  clockInLat       String?
  clockInLong      String?
  clockOutDistance Int?
  clockOutLat      String?
  clockOutLong     String?
  officeId         String?
  duration         String?
  clockInPhoto     String?
  clockOutPhoto    String?
  office           Office?   @relation(fields: [officeId], references: [id])
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Division {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]   @relation("DivisionToUser")
}

model Grade {
  id        String   @id @default(uuid())
  name      String
  level     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model Leave {
  id        String     @id @default(uuid())
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  dateEnt   DateTime
  dateStart DateTime
  dayCount  Int
  status    String
  approvals Approval[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Approval {
  id        String   @id @default(uuid())
  type      String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  leaveId   String
  userId    String
  leave     Leave    @relation(fields: [leaveId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
